<?php
/**
 * NsfwResult
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * videoapi
 *
 * The video APIs help you convert, encode, and transcode videos.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * NsfwResult Class Doc Comment
 *
 * @category Class
 * @description The result of scanning a video file for NSFW content
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class NsfwResult implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'NsfwResult';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'successful' => 'bool',
        'highest_classification_result' => 'string',
        'highest_score' => 'double',
        'total_racy_frames' => 'int',
        'total_nsfw_frames' => 'int',
        'total_frames' => 'int',
        'nsfw_scanned_frames' => '\Swagger\Client\Model\NsfwScannedFrame[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'successful' => null,
        'highest_classification_result' => null,
        'highest_score' => 'double',
        'total_racy_frames' => 'int32',
        'total_nsfw_frames' => 'int32',
        'total_frames' => 'int32',
        'nsfw_scanned_frames' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'successful' => 'Successful',
        'highest_classification_result' => 'HighestClassificationResult',
        'highest_score' => 'HighestScore',
        'total_racy_frames' => 'TotalRacyFrames',
        'total_nsfw_frames' => 'TotalNsfwFrames',
        'total_frames' => 'TotalFrames',
        'nsfw_scanned_frames' => 'NsfwScannedFrames'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'successful' => 'setSuccessful',
        'highest_classification_result' => 'setHighestClassificationResult',
        'highest_score' => 'setHighestScore',
        'total_racy_frames' => 'setTotalRacyFrames',
        'total_nsfw_frames' => 'setTotalNsfwFrames',
        'total_frames' => 'setTotalFrames',
        'nsfw_scanned_frames' => 'setNsfwScannedFrames'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'successful' => 'getSuccessful',
        'highest_classification_result' => 'getHighestClassificationResult',
        'highest_score' => 'getHighestScore',
        'total_racy_frames' => 'getTotalRacyFrames',
        'total_nsfw_frames' => 'getTotalNsfwFrames',
        'total_frames' => 'getTotalFrames',
        'nsfw_scanned_frames' => 'getNsfwScannedFrames'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['successful'] = isset($data['successful']) ? $data['successful'] : null;
        $this->container['highest_classification_result'] = isset($data['highest_classification_result']) ? $data['highest_classification_result'] : null;
        $this->container['highest_score'] = isset($data['highest_score']) ? $data['highest_score'] : null;
        $this->container['total_racy_frames'] = isset($data['total_racy_frames']) ? $data['total_racy_frames'] : null;
        $this->container['total_nsfw_frames'] = isset($data['total_nsfw_frames']) ? $data['total_nsfw_frames'] : null;
        $this->container['total_frames'] = isset($data['total_frames']) ? $data['total_frames'] : null;
        $this->container['nsfw_scanned_frames'] = isset($data['nsfw_scanned_frames']) ? $data['nsfw_scanned_frames'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets successful
     *
     * @return bool
     */
    public function getSuccessful()
    {
        return $this->container['successful'];
    }

    /**
     * Sets successful
     *
     * @param bool $successful True if the operation was successful, false otherwise
     *
     * @return $this
     */
    public function setSuccessful($successful)
    {
        $this->container['successful'] = $successful;

        return $this;
    }

    /**
     * Gets highest_classification_result
     *
     * @return string
     */
    public function getHighestClassificationResult()
    {
        return $this->container['highest_classification_result'];
    }

    /**
     * Sets highest_classification_result
     *
     * @param string $highest_classification_result The highest NSFW classification of the video
     *
     * @return $this
     */
    public function setHighestClassificationResult($highest_classification_result)
    {
        $this->container['highest_classification_result'] = $highest_classification_result;

        return $this;
    }

    /**
     * Gets highest_score
     *
     * @return double
     */
    public function getHighestScore()
    {
        return $this->container['highest_score'];
    }

    /**
     * Sets highest_score
     *
     * @param double $highest_score The highest NSFW score out of all frames scanned
     *
     * @return $this
     */
    public function setHighestScore($highest_score)
    {
        $this->container['highest_score'] = $highest_score;

        return $this;
    }

    /**
     * Gets total_racy_frames
     *
     * @return int
     */
    public function getTotalRacyFrames()
    {
        return $this->container['total_racy_frames'];
    }

    /**
     * Sets total_racy_frames
     *
     * @param int $total_racy_frames The total number of potentially \"racy\" frames.
     *
     * @return $this
     */
    public function setTotalRacyFrames($total_racy_frames)
    {
        $this->container['total_racy_frames'] = $total_racy_frames;

        return $this;
    }

    /**
     * Gets total_nsfw_frames
     *
     * @return int
     */
    public function getTotalNsfwFrames()
    {
        return $this->container['total_nsfw_frames'];
    }

    /**
     * Sets total_nsfw_frames
     *
     * @param int $total_nsfw_frames The total number of frames with high probability of NSFW.
     *
     * @return $this
     */
    public function setTotalNsfwFrames($total_nsfw_frames)
    {
        $this->container['total_nsfw_frames'] = $total_nsfw_frames;

        return $this;
    }

    /**
     * Gets total_frames
     *
     * @return int
     */
    public function getTotalFrames()
    {
        return $this->container['total_frames'];
    }

    /**
     * Sets total_frames
     *
     * @param int $total_frames The total number of frames scanned
     *
     * @return $this
     */
    public function setTotalFrames($total_frames)
    {
        $this->container['total_frames'] = $total_frames;

        return $this;
    }

    /**
     * Gets nsfw_scanned_frames
     *
     * @return \Swagger\Client\Model\NsfwScannedFrame[]
     */
    public function getNsfwScannedFrames()
    {
        return $this->container['nsfw_scanned_frames'];
    }

    /**
     * Sets nsfw_scanned_frames
     *
     * @param \Swagger\Client\Model\NsfwScannedFrame[] $nsfw_scanned_frames The NSFW scanning results for each frame
     *
     * @return $this
     */
    public function setNsfwScannedFrames($nsfw_scanned_frames)
    {
        $this->container['nsfw_scanned_frames'] = $nsfw_scanned_frames;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


