<?php
/**
 * VideoApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * videoapi
 *
 * The video APIs help you convert, encode, and transcode videos.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * VideoApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class VideoApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation videoConvertToGif
     *
     * Convert Video to Animated GIF format.
     *
     * @param  \SplFileObject $input_file Input file to perform the operation on. (required)
     * @param  string $file_url Optional; URL of a video file being used for conversion. Use this option for files larger than 2GB. (optional)
     * @param  int $max_width Optional; Maximum width of the output video, up to the original video width. Defaults to 250 pixels. (optional)
     * @param  int $max_height Optional; Maximum height of the output video, up to the original video width. Defaults to 250 pixels. (optional)
     * @param  bool $preserve_aspect_ratio Optional; If false, the original video&#39;s aspect ratio will not be preserved, allowing customization of the aspect ratio using maxWidth and maxHeight, potentially skewing the video. Default is true. (optional)
     * @param  int $frame_rate Optional; Specify the frame rate of the output video. Defaults to 24 frames per second. (optional)
     * @param  bool $extend_processing_time Optional; If true, will allow additional processing time for the video file conversion, using one API call per additional minute over the 5 minute default processing time, up to a maximum of 25 total minutes. This is generally necessary for files larger than 500 MB or longer than 30 minutes. (optional)
     * @param  \DateTime $start_time Optional; Specify the desired starting time of the GIF video in TimeSpan format. (optional)
     * @param  \DateTime $time_span Optional; Specify the desired length of the GIF video in TimeSpan format. Limit is 30 minutes. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function videoConvertToGif($input_file, $file_url = null, $max_width = null, $max_height = null, $preserve_aspect_ratio = null, $frame_rate = null, $extend_processing_time = null, $start_time = null, $time_span = null)
    {
        list($response) = $this->videoConvertToGifWithHttpInfo($input_file, $file_url, $max_width, $max_height, $preserve_aspect_ratio, $frame_rate, $extend_processing_time, $start_time, $time_span);
        return $response;
    }

    /**
     * Operation videoConvertToGifWithHttpInfo
     *
     * Convert Video to Animated GIF format.
     *
     * @param  \SplFileObject $input_file Input file to perform the operation on. (required)
     * @param  string $file_url Optional; URL of a video file being used for conversion. Use this option for files larger than 2GB. (optional)
     * @param  int $max_width Optional; Maximum width of the output video, up to the original video width. Defaults to 250 pixels. (optional)
     * @param  int $max_height Optional; Maximum height of the output video, up to the original video width. Defaults to 250 pixels. (optional)
     * @param  bool $preserve_aspect_ratio Optional; If false, the original video&#39;s aspect ratio will not be preserved, allowing customization of the aspect ratio using maxWidth and maxHeight, potentially skewing the video. Default is true. (optional)
     * @param  int $frame_rate Optional; Specify the frame rate of the output video. Defaults to 24 frames per second. (optional)
     * @param  bool $extend_processing_time Optional; If true, will allow additional processing time for the video file conversion, using one API call per additional minute over the 5 minute default processing time, up to a maximum of 25 total minutes. This is generally necessary for files larger than 500 MB or longer than 30 minutes. (optional)
     * @param  \DateTime $start_time Optional; Specify the desired starting time of the GIF video in TimeSpan format. (optional)
     * @param  \DateTime $time_span Optional; Specify the desired length of the GIF video in TimeSpan format. Limit is 30 minutes. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function videoConvertToGifWithHttpInfo($input_file, $file_url = null, $max_width = null, $max_height = null, $preserve_aspect_ratio = null, $frame_rate = null, $extend_processing_time = null, $start_time = null, $time_span = null)
    {
        $returnType = 'string';
        $request = $this->videoConvertToGifRequest($input_file, $file_url, $max_width, $max_height, $preserve_aspect_ratio, $frame_rate, $extend_processing_time, $start_time, $time_span);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation videoConvertToGifAsync
     *
     * Convert Video to Animated GIF format.
     *
     * @param  \SplFileObject $input_file Input file to perform the operation on. (required)
     * @param  string $file_url Optional; URL of a video file being used for conversion. Use this option for files larger than 2GB. (optional)
     * @param  int $max_width Optional; Maximum width of the output video, up to the original video width. Defaults to 250 pixels. (optional)
     * @param  int $max_height Optional; Maximum height of the output video, up to the original video width. Defaults to 250 pixels. (optional)
     * @param  bool $preserve_aspect_ratio Optional; If false, the original video&#39;s aspect ratio will not be preserved, allowing customization of the aspect ratio using maxWidth and maxHeight, potentially skewing the video. Default is true. (optional)
     * @param  int $frame_rate Optional; Specify the frame rate of the output video. Defaults to 24 frames per second. (optional)
     * @param  bool $extend_processing_time Optional; If true, will allow additional processing time for the video file conversion, using one API call per additional minute over the 5 minute default processing time, up to a maximum of 25 total minutes. This is generally necessary for files larger than 500 MB or longer than 30 minutes. (optional)
     * @param  \DateTime $start_time Optional; Specify the desired starting time of the GIF video in TimeSpan format. (optional)
     * @param  \DateTime $time_span Optional; Specify the desired length of the GIF video in TimeSpan format. Limit is 30 minutes. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function videoConvertToGifAsync($input_file, $file_url = null, $max_width = null, $max_height = null, $preserve_aspect_ratio = null, $frame_rate = null, $extend_processing_time = null, $start_time = null, $time_span = null)
    {
        return $this->videoConvertToGifAsyncWithHttpInfo($input_file, $file_url, $max_width, $max_height, $preserve_aspect_ratio, $frame_rate, $extend_processing_time, $start_time, $time_span)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation videoConvertToGifAsyncWithHttpInfo
     *
     * Convert Video to Animated GIF format.
     *
     * @param  \SplFileObject $input_file Input file to perform the operation on. (required)
     * @param  string $file_url Optional; URL of a video file being used for conversion. Use this option for files larger than 2GB. (optional)
     * @param  int $max_width Optional; Maximum width of the output video, up to the original video width. Defaults to 250 pixels. (optional)
     * @param  int $max_height Optional; Maximum height of the output video, up to the original video width. Defaults to 250 pixels. (optional)
     * @param  bool $preserve_aspect_ratio Optional; If false, the original video&#39;s aspect ratio will not be preserved, allowing customization of the aspect ratio using maxWidth and maxHeight, potentially skewing the video. Default is true. (optional)
     * @param  int $frame_rate Optional; Specify the frame rate of the output video. Defaults to 24 frames per second. (optional)
     * @param  bool $extend_processing_time Optional; If true, will allow additional processing time for the video file conversion, using one API call per additional minute over the 5 minute default processing time, up to a maximum of 25 total minutes. This is generally necessary for files larger than 500 MB or longer than 30 minutes. (optional)
     * @param  \DateTime $start_time Optional; Specify the desired starting time of the GIF video in TimeSpan format. (optional)
     * @param  \DateTime $time_span Optional; Specify the desired length of the GIF video in TimeSpan format. Limit is 30 minutes. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function videoConvertToGifAsyncWithHttpInfo($input_file, $file_url = null, $max_width = null, $max_height = null, $preserve_aspect_ratio = null, $frame_rate = null, $extend_processing_time = null, $start_time = null, $time_span = null)
    {
        $returnType = 'string';
        $request = $this->videoConvertToGifRequest($input_file, $file_url, $max_width, $max_height, $preserve_aspect_ratio, $frame_rate, $extend_processing_time, $start_time, $time_span);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'videoConvertToGif'
     *
     * @param  \SplFileObject $input_file Input file to perform the operation on. (required)
     * @param  string $file_url Optional; URL of a video file being used for conversion. Use this option for files larger than 2GB. (optional)
     * @param  int $max_width Optional; Maximum width of the output video, up to the original video width. Defaults to 250 pixels. (optional)
     * @param  int $max_height Optional; Maximum height of the output video, up to the original video width. Defaults to 250 pixels. (optional)
     * @param  bool $preserve_aspect_ratio Optional; If false, the original video&#39;s aspect ratio will not be preserved, allowing customization of the aspect ratio using maxWidth and maxHeight, potentially skewing the video. Default is true. (optional)
     * @param  int $frame_rate Optional; Specify the frame rate of the output video. Defaults to 24 frames per second. (optional)
     * @param  bool $extend_processing_time Optional; If true, will allow additional processing time for the video file conversion, using one API call per additional minute over the 5 minute default processing time, up to a maximum of 25 total minutes. This is generally necessary for files larger than 500 MB or longer than 30 minutes. (optional)
     * @param  \DateTime $start_time Optional; Specify the desired starting time of the GIF video in TimeSpan format. (optional)
     * @param  \DateTime $time_span Optional; Specify the desired length of the GIF video in TimeSpan format. Limit is 30 minutes. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function videoConvertToGifRequest($input_file, $file_url = null, $max_width = null, $max_height = null, $preserve_aspect_ratio = null, $frame_rate = null, $extend_processing_time = null, $start_time = null, $time_span = null)
    {
        // verify the required parameter 'input_file' is set
        if ($input_file === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $input_file when calling videoConvertToGif'
            );
        }

        $resourcePath = '/video/convert/to/gif';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($file_url !== null) {
            $headerParams['fileUrl'] = ObjectSerializer::toHeaderValue($file_url);
        }
        // header params
        if ($max_width !== null) {
            $headerParams['maxWidth'] = ObjectSerializer::toHeaderValue($max_width);
        }
        // header params
        if ($max_height !== null) {
            $headerParams['maxHeight'] = ObjectSerializer::toHeaderValue($max_height);
        }
        // header params
        if ($preserve_aspect_ratio !== null) {
            $headerParams['preserveAspectRatio'] = ObjectSerializer::toHeaderValue($preserve_aspect_ratio);
        }
        // header params
        if ($frame_rate !== null) {
            $headerParams['frameRate'] = ObjectSerializer::toHeaderValue($frame_rate);
        }
        // header params
        if ($extend_processing_time !== null) {
            $headerParams['extendProcessingTime'] = ObjectSerializer::toHeaderValue($extend_processing_time);
        }
        // header params
        if ($start_time !== null) {
            $headerParams['startTime'] = ObjectSerializer::toHeaderValue($start_time);
        }
        // header params
        if ($time_span !== null) {
            $headerParams['timeSpan'] = ObjectSerializer::toHeaderValue($time_span);
        }


        // form params
        if ($input_file !== null) {
            $multipart = true;
            $formParams['inputFile'] = \GuzzleHttp\Psr7\try_fopen(ObjectSerializer::toFormValue($input_file), 'rb');
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Apikey');
        if ($apiKey !== null) {
            $headers['Apikey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation videoConvertToMov
     *
     * Convert Video to MOV format.
     *
     * @param  \SplFileObject $input_file Input file to perform the operation on. (required)
     * @param  string $file_url Optional; URL of a video file being used for conversion. Use this option for files larger than 2GB. (optional)
     * @param  int $max_width Optional; Maximum width of the output video, up to the original video width. Defaults to original video width. (optional)
     * @param  int $max_height Optional; Maximum height of the output video, up to the original video width. Defaults to original video height. (optional)
     * @param  bool $preserve_aspect_ratio Optional; If false, the original video&#39;s aspect ratio will not be preserved, allowing customization of the aspect ratio using maxWidth and maxHeight, potentially skewing the video. Default is true. (optional)
     * @param  int $frame_rate Optional; Specify the frame rate of the output video. Defaults to original video frame rate. (optional)
     * @param  int $quality Optional; Specify the quality of the output video, where 100 is lossless and 1 is the lowest possible quality with highest compression. Default is 50. (optional)
     * @param  bool $extend_processing_time Optional; If true, will allow additional processing time for the video file conversion, using one API call per additional minute over the 5 minute default processing time, up to a maximum of 25 total minutes. This is generally necessary for files larger than 500 MB or longer than 30 minutes. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function videoConvertToMov($input_file, $file_url = null, $max_width = null, $max_height = null, $preserve_aspect_ratio = null, $frame_rate = null, $quality = null, $extend_processing_time = null)
    {
        list($response) = $this->videoConvertToMovWithHttpInfo($input_file, $file_url, $max_width, $max_height, $preserve_aspect_ratio, $frame_rate, $quality, $extend_processing_time);
        return $response;
    }

    /**
     * Operation videoConvertToMovWithHttpInfo
     *
     * Convert Video to MOV format.
     *
     * @param  \SplFileObject $input_file Input file to perform the operation on. (required)
     * @param  string $file_url Optional; URL of a video file being used for conversion. Use this option for files larger than 2GB. (optional)
     * @param  int $max_width Optional; Maximum width of the output video, up to the original video width. Defaults to original video width. (optional)
     * @param  int $max_height Optional; Maximum height of the output video, up to the original video width. Defaults to original video height. (optional)
     * @param  bool $preserve_aspect_ratio Optional; If false, the original video&#39;s aspect ratio will not be preserved, allowing customization of the aspect ratio using maxWidth and maxHeight, potentially skewing the video. Default is true. (optional)
     * @param  int $frame_rate Optional; Specify the frame rate of the output video. Defaults to original video frame rate. (optional)
     * @param  int $quality Optional; Specify the quality of the output video, where 100 is lossless and 1 is the lowest possible quality with highest compression. Default is 50. (optional)
     * @param  bool $extend_processing_time Optional; If true, will allow additional processing time for the video file conversion, using one API call per additional minute over the 5 minute default processing time, up to a maximum of 25 total minutes. This is generally necessary for files larger than 500 MB or longer than 30 minutes. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function videoConvertToMovWithHttpInfo($input_file, $file_url = null, $max_width = null, $max_height = null, $preserve_aspect_ratio = null, $frame_rate = null, $quality = null, $extend_processing_time = null)
    {
        $returnType = 'string';
        $request = $this->videoConvertToMovRequest($input_file, $file_url, $max_width, $max_height, $preserve_aspect_ratio, $frame_rate, $quality, $extend_processing_time);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation videoConvertToMovAsync
     *
     * Convert Video to MOV format.
     *
     * @param  \SplFileObject $input_file Input file to perform the operation on. (required)
     * @param  string $file_url Optional; URL of a video file being used for conversion. Use this option for files larger than 2GB. (optional)
     * @param  int $max_width Optional; Maximum width of the output video, up to the original video width. Defaults to original video width. (optional)
     * @param  int $max_height Optional; Maximum height of the output video, up to the original video width. Defaults to original video height. (optional)
     * @param  bool $preserve_aspect_ratio Optional; If false, the original video&#39;s aspect ratio will not be preserved, allowing customization of the aspect ratio using maxWidth and maxHeight, potentially skewing the video. Default is true. (optional)
     * @param  int $frame_rate Optional; Specify the frame rate of the output video. Defaults to original video frame rate. (optional)
     * @param  int $quality Optional; Specify the quality of the output video, where 100 is lossless and 1 is the lowest possible quality with highest compression. Default is 50. (optional)
     * @param  bool $extend_processing_time Optional; If true, will allow additional processing time for the video file conversion, using one API call per additional minute over the 5 minute default processing time, up to a maximum of 25 total minutes. This is generally necessary for files larger than 500 MB or longer than 30 minutes. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function videoConvertToMovAsync($input_file, $file_url = null, $max_width = null, $max_height = null, $preserve_aspect_ratio = null, $frame_rate = null, $quality = null, $extend_processing_time = null)
    {
        return $this->videoConvertToMovAsyncWithHttpInfo($input_file, $file_url, $max_width, $max_height, $preserve_aspect_ratio, $frame_rate, $quality, $extend_processing_time)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation videoConvertToMovAsyncWithHttpInfo
     *
     * Convert Video to MOV format.
     *
     * @param  \SplFileObject $input_file Input file to perform the operation on. (required)
     * @param  string $file_url Optional; URL of a video file being used for conversion. Use this option for files larger than 2GB. (optional)
     * @param  int $max_width Optional; Maximum width of the output video, up to the original video width. Defaults to original video width. (optional)
     * @param  int $max_height Optional; Maximum height of the output video, up to the original video width. Defaults to original video height. (optional)
     * @param  bool $preserve_aspect_ratio Optional; If false, the original video&#39;s aspect ratio will not be preserved, allowing customization of the aspect ratio using maxWidth and maxHeight, potentially skewing the video. Default is true. (optional)
     * @param  int $frame_rate Optional; Specify the frame rate of the output video. Defaults to original video frame rate. (optional)
     * @param  int $quality Optional; Specify the quality of the output video, where 100 is lossless and 1 is the lowest possible quality with highest compression. Default is 50. (optional)
     * @param  bool $extend_processing_time Optional; If true, will allow additional processing time for the video file conversion, using one API call per additional minute over the 5 minute default processing time, up to a maximum of 25 total minutes. This is generally necessary for files larger than 500 MB or longer than 30 minutes. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function videoConvertToMovAsyncWithHttpInfo($input_file, $file_url = null, $max_width = null, $max_height = null, $preserve_aspect_ratio = null, $frame_rate = null, $quality = null, $extend_processing_time = null)
    {
        $returnType = 'string';
        $request = $this->videoConvertToMovRequest($input_file, $file_url, $max_width, $max_height, $preserve_aspect_ratio, $frame_rate, $quality, $extend_processing_time);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'videoConvertToMov'
     *
     * @param  \SplFileObject $input_file Input file to perform the operation on. (required)
     * @param  string $file_url Optional; URL of a video file being used for conversion. Use this option for files larger than 2GB. (optional)
     * @param  int $max_width Optional; Maximum width of the output video, up to the original video width. Defaults to original video width. (optional)
     * @param  int $max_height Optional; Maximum height of the output video, up to the original video width. Defaults to original video height. (optional)
     * @param  bool $preserve_aspect_ratio Optional; If false, the original video&#39;s aspect ratio will not be preserved, allowing customization of the aspect ratio using maxWidth and maxHeight, potentially skewing the video. Default is true. (optional)
     * @param  int $frame_rate Optional; Specify the frame rate of the output video. Defaults to original video frame rate. (optional)
     * @param  int $quality Optional; Specify the quality of the output video, where 100 is lossless and 1 is the lowest possible quality with highest compression. Default is 50. (optional)
     * @param  bool $extend_processing_time Optional; If true, will allow additional processing time for the video file conversion, using one API call per additional minute over the 5 minute default processing time, up to a maximum of 25 total minutes. This is generally necessary for files larger than 500 MB or longer than 30 minutes. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function videoConvertToMovRequest($input_file, $file_url = null, $max_width = null, $max_height = null, $preserve_aspect_ratio = null, $frame_rate = null, $quality = null, $extend_processing_time = null)
    {
        // verify the required parameter 'input_file' is set
        if ($input_file === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $input_file when calling videoConvertToMov'
            );
        }

        $resourcePath = '/video/convert/to/mov';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($file_url !== null) {
            $headerParams['fileUrl'] = ObjectSerializer::toHeaderValue($file_url);
        }
        // header params
        if ($max_width !== null) {
            $headerParams['maxWidth'] = ObjectSerializer::toHeaderValue($max_width);
        }
        // header params
        if ($max_height !== null) {
            $headerParams['maxHeight'] = ObjectSerializer::toHeaderValue($max_height);
        }
        // header params
        if ($preserve_aspect_ratio !== null) {
            $headerParams['preserveAspectRatio'] = ObjectSerializer::toHeaderValue($preserve_aspect_ratio);
        }
        // header params
        if ($frame_rate !== null) {
            $headerParams['frameRate'] = ObjectSerializer::toHeaderValue($frame_rate);
        }
        // header params
        if ($quality !== null) {
            $headerParams['quality'] = ObjectSerializer::toHeaderValue($quality);
        }
        // header params
        if ($extend_processing_time !== null) {
            $headerParams['extendProcessingTime'] = ObjectSerializer::toHeaderValue($extend_processing_time);
        }


        // form params
        if ($input_file !== null) {
            $multipart = true;
            $formParams['inputFile'] = \GuzzleHttp\Psr7\try_fopen(ObjectSerializer::toFormValue($input_file), 'rb');
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Apikey');
        if ($apiKey !== null) {
            $headers['Apikey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation videoConvertToMp4
     *
     * Convert Video to MP4 format.
     *
     * @param  \SplFileObject $input_file Input file to perform the operation on. (required)
     * @param  string $file_url Optional; URL of a video file being used for conversion. Use this option for files larger than 2GB. (optional)
     * @param  int $max_width Optional; Maximum width of the output video, up to the original video width. Defaults to original video width. (optional)
     * @param  int $max_height Optional; Maximum height of the output video, up to the original video width. Defaults to original video height. (optional)
     * @param  bool $preserve_aspect_ratio Optional; If false, the original video&#39;s aspect ratio will not be preserved, allowing customization of the aspect ratio using maxWidth and maxHeight, potentially skewing the video. Default is true. (optional)
     * @param  int $frame_rate Optional; Specify the frame rate of the output video. Defaults to original video frame rate. (optional)
     * @param  int $quality Optional; Specify the quality of the output video, where 100 is lossless and 1 is the lowest possible quality with highest compression. Default is 50. (optional)
     * @param  bool $extend_processing_time Optional; If true, will allow additional processing time for the video file conversion, using one API call per additional minute over the 5 minute default processing time, up to a maximum of 25 total minutes. This is generally necessary for files larger than 500 MB or longer than 30 minutes. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function videoConvertToMp4($input_file, $file_url = null, $max_width = null, $max_height = null, $preserve_aspect_ratio = null, $frame_rate = null, $quality = null, $extend_processing_time = null)
    {
        list($response) = $this->videoConvertToMp4WithHttpInfo($input_file, $file_url, $max_width, $max_height, $preserve_aspect_ratio, $frame_rate, $quality, $extend_processing_time);
        return $response;
    }

    /**
     * Operation videoConvertToMp4WithHttpInfo
     *
     * Convert Video to MP4 format.
     *
     * @param  \SplFileObject $input_file Input file to perform the operation on. (required)
     * @param  string $file_url Optional; URL of a video file being used for conversion. Use this option for files larger than 2GB. (optional)
     * @param  int $max_width Optional; Maximum width of the output video, up to the original video width. Defaults to original video width. (optional)
     * @param  int $max_height Optional; Maximum height of the output video, up to the original video width. Defaults to original video height. (optional)
     * @param  bool $preserve_aspect_ratio Optional; If false, the original video&#39;s aspect ratio will not be preserved, allowing customization of the aspect ratio using maxWidth and maxHeight, potentially skewing the video. Default is true. (optional)
     * @param  int $frame_rate Optional; Specify the frame rate of the output video. Defaults to original video frame rate. (optional)
     * @param  int $quality Optional; Specify the quality of the output video, where 100 is lossless and 1 is the lowest possible quality with highest compression. Default is 50. (optional)
     * @param  bool $extend_processing_time Optional; If true, will allow additional processing time for the video file conversion, using one API call per additional minute over the 5 minute default processing time, up to a maximum of 25 total minutes. This is generally necessary for files larger than 500 MB or longer than 30 minutes. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function videoConvertToMp4WithHttpInfo($input_file, $file_url = null, $max_width = null, $max_height = null, $preserve_aspect_ratio = null, $frame_rate = null, $quality = null, $extend_processing_time = null)
    {
        $returnType = 'string';
        $request = $this->videoConvertToMp4Request($input_file, $file_url, $max_width, $max_height, $preserve_aspect_ratio, $frame_rate, $quality, $extend_processing_time);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation videoConvertToMp4Async
     *
     * Convert Video to MP4 format.
     *
     * @param  \SplFileObject $input_file Input file to perform the operation on. (required)
     * @param  string $file_url Optional; URL of a video file being used for conversion. Use this option for files larger than 2GB. (optional)
     * @param  int $max_width Optional; Maximum width of the output video, up to the original video width. Defaults to original video width. (optional)
     * @param  int $max_height Optional; Maximum height of the output video, up to the original video width. Defaults to original video height. (optional)
     * @param  bool $preserve_aspect_ratio Optional; If false, the original video&#39;s aspect ratio will not be preserved, allowing customization of the aspect ratio using maxWidth and maxHeight, potentially skewing the video. Default is true. (optional)
     * @param  int $frame_rate Optional; Specify the frame rate of the output video. Defaults to original video frame rate. (optional)
     * @param  int $quality Optional; Specify the quality of the output video, where 100 is lossless and 1 is the lowest possible quality with highest compression. Default is 50. (optional)
     * @param  bool $extend_processing_time Optional; If true, will allow additional processing time for the video file conversion, using one API call per additional minute over the 5 minute default processing time, up to a maximum of 25 total minutes. This is generally necessary for files larger than 500 MB or longer than 30 minutes. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function videoConvertToMp4Async($input_file, $file_url = null, $max_width = null, $max_height = null, $preserve_aspect_ratio = null, $frame_rate = null, $quality = null, $extend_processing_time = null)
    {
        return $this->videoConvertToMp4AsyncWithHttpInfo($input_file, $file_url, $max_width, $max_height, $preserve_aspect_ratio, $frame_rate, $quality, $extend_processing_time)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation videoConvertToMp4AsyncWithHttpInfo
     *
     * Convert Video to MP4 format.
     *
     * @param  \SplFileObject $input_file Input file to perform the operation on. (required)
     * @param  string $file_url Optional; URL of a video file being used for conversion. Use this option for files larger than 2GB. (optional)
     * @param  int $max_width Optional; Maximum width of the output video, up to the original video width. Defaults to original video width. (optional)
     * @param  int $max_height Optional; Maximum height of the output video, up to the original video width. Defaults to original video height. (optional)
     * @param  bool $preserve_aspect_ratio Optional; If false, the original video&#39;s aspect ratio will not be preserved, allowing customization of the aspect ratio using maxWidth and maxHeight, potentially skewing the video. Default is true. (optional)
     * @param  int $frame_rate Optional; Specify the frame rate of the output video. Defaults to original video frame rate. (optional)
     * @param  int $quality Optional; Specify the quality of the output video, where 100 is lossless and 1 is the lowest possible quality with highest compression. Default is 50. (optional)
     * @param  bool $extend_processing_time Optional; If true, will allow additional processing time for the video file conversion, using one API call per additional minute over the 5 minute default processing time, up to a maximum of 25 total minutes. This is generally necessary for files larger than 500 MB or longer than 30 minutes. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function videoConvertToMp4AsyncWithHttpInfo($input_file, $file_url = null, $max_width = null, $max_height = null, $preserve_aspect_ratio = null, $frame_rate = null, $quality = null, $extend_processing_time = null)
    {
        $returnType = 'string';
        $request = $this->videoConvertToMp4Request($input_file, $file_url, $max_width, $max_height, $preserve_aspect_ratio, $frame_rate, $quality, $extend_processing_time);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'videoConvertToMp4'
     *
     * @param  \SplFileObject $input_file Input file to perform the operation on. (required)
     * @param  string $file_url Optional; URL of a video file being used for conversion. Use this option for files larger than 2GB. (optional)
     * @param  int $max_width Optional; Maximum width of the output video, up to the original video width. Defaults to original video width. (optional)
     * @param  int $max_height Optional; Maximum height of the output video, up to the original video width. Defaults to original video height. (optional)
     * @param  bool $preserve_aspect_ratio Optional; If false, the original video&#39;s aspect ratio will not be preserved, allowing customization of the aspect ratio using maxWidth and maxHeight, potentially skewing the video. Default is true. (optional)
     * @param  int $frame_rate Optional; Specify the frame rate of the output video. Defaults to original video frame rate. (optional)
     * @param  int $quality Optional; Specify the quality of the output video, where 100 is lossless and 1 is the lowest possible quality with highest compression. Default is 50. (optional)
     * @param  bool $extend_processing_time Optional; If true, will allow additional processing time for the video file conversion, using one API call per additional minute over the 5 minute default processing time, up to a maximum of 25 total minutes. This is generally necessary for files larger than 500 MB or longer than 30 minutes. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function videoConvertToMp4Request($input_file, $file_url = null, $max_width = null, $max_height = null, $preserve_aspect_ratio = null, $frame_rate = null, $quality = null, $extend_processing_time = null)
    {
        // verify the required parameter 'input_file' is set
        if ($input_file === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $input_file when calling videoConvertToMp4'
            );
        }

        $resourcePath = '/video/convert/to/mp4';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($file_url !== null) {
            $headerParams['fileUrl'] = ObjectSerializer::toHeaderValue($file_url);
        }
        // header params
        if ($max_width !== null) {
            $headerParams['maxWidth'] = ObjectSerializer::toHeaderValue($max_width);
        }
        // header params
        if ($max_height !== null) {
            $headerParams['maxHeight'] = ObjectSerializer::toHeaderValue($max_height);
        }
        // header params
        if ($preserve_aspect_ratio !== null) {
            $headerParams['preserveAspectRatio'] = ObjectSerializer::toHeaderValue($preserve_aspect_ratio);
        }
        // header params
        if ($frame_rate !== null) {
            $headerParams['frameRate'] = ObjectSerializer::toHeaderValue($frame_rate);
        }
        // header params
        if ($quality !== null) {
            $headerParams['quality'] = ObjectSerializer::toHeaderValue($quality);
        }
        // header params
        if ($extend_processing_time !== null) {
            $headerParams['extendProcessingTime'] = ObjectSerializer::toHeaderValue($extend_processing_time);
        }


        // form params
        if ($input_file !== null) {
            $multipart = true;
            $formParams['inputFile'] = \GuzzleHttp\Psr7\try_fopen(ObjectSerializer::toFormValue($input_file), 'rb');
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Apikey');
        if ($apiKey !== null) {
            $headers['Apikey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation videoConvertToWebm
     *
     * Convert Video to WEBM format.
     *
     * @param  \SplFileObject $input_file Input file to perform the operation on. (required)
     * @param  string $file_url Optional; URL of a video file being used for conversion. Use this option for files larger than 2GB. (optional)
     * @param  int $max_width Optional; Maximum width of the output video, up to the original video width. Defaults to original video width. (optional)
     * @param  int $max_height Optional; Maximum height of the output video, up to the original video width. Defaults to original video height. (optional)
     * @param  bool $preserve_aspect_ratio Optional; If false, the original video&#39;s aspect ratio will not be preserved, allowing customization of the aspect ratio using maxWidth and maxHeight, potentially skewing the video. Default is true. (optional)
     * @param  int $frame_rate Optional; Specify the frame rate of the output video. Defaults to original video frame rate. (optional)
     * @param  int $quality Optional; Specify the quality of the output video, where 100 is lossless and 1 is the lowest possible quality with highest compression. Default is 50. (optional)
     * @param  bool $extend_processing_time Optional; If true, will allow additional processing time for the video file conversion, using one API call per additional minute over the 5 minute default processing time, up to a maximum of 25 total minutes. This is generally necessary for files larger than 500 MB or longer than 30 minutes. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function videoConvertToWebm($input_file, $file_url = null, $max_width = null, $max_height = null, $preserve_aspect_ratio = null, $frame_rate = null, $quality = null, $extend_processing_time = null)
    {
        list($response) = $this->videoConvertToWebmWithHttpInfo($input_file, $file_url, $max_width, $max_height, $preserve_aspect_ratio, $frame_rate, $quality, $extend_processing_time);
        return $response;
    }

    /**
     * Operation videoConvertToWebmWithHttpInfo
     *
     * Convert Video to WEBM format.
     *
     * @param  \SplFileObject $input_file Input file to perform the operation on. (required)
     * @param  string $file_url Optional; URL of a video file being used for conversion. Use this option for files larger than 2GB. (optional)
     * @param  int $max_width Optional; Maximum width of the output video, up to the original video width. Defaults to original video width. (optional)
     * @param  int $max_height Optional; Maximum height of the output video, up to the original video width. Defaults to original video height. (optional)
     * @param  bool $preserve_aspect_ratio Optional; If false, the original video&#39;s aspect ratio will not be preserved, allowing customization of the aspect ratio using maxWidth and maxHeight, potentially skewing the video. Default is true. (optional)
     * @param  int $frame_rate Optional; Specify the frame rate of the output video. Defaults to original video frame rate. (optional)
     * @param  int $quality Optional; Specify the quality of the output video, where 100 is lossless and 1 is the lowest possible quality with highest compression. Default is 50. (optional)
     * @param  bool $extend_processing_time Optional; If true, will allow additional processing time for the video file conversion, using one API call per additional minute over the 5 minute default processing time, up to a maximum of 25 total minutes. This is generally necessary for files larger than 500 MB or longer than 30 minutes. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function videoConvertToWebmWithHttpInfo($input_file, $file_url = null, $max_width = null, $max_height = null, $preserve_aspect_ratio = null, $frame_rate = null, $quality = null, $extend_processing_time = null)
    {
        $returnType = 'string';
        $request = $this->videoConvertToWebmRequest($input_file, $file_url, $max_width, $max_height, $preserve_aspect_ratio, $frame_rate, $quality, $extend_processing_time);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation videoConvertToWebmAsync
     *
     * Convert Video to WEBM format.
     *
     * @param  \SplFileObject $input_file Input file to perform the operation on. (required)
     * @param  string $file_url Optional; URL of a video file being used for conversion. Use this option for files larger than 2GB. (optional)
     * @param  int $max_width Optional; Maximum width of the output video, up to the original video width. Defaults to original video width. (optional)
     * @param  int $max_height Optional; Maximum height of the output video, up to the original video width. Defaults to original video height. (optional)
     * @param  bool $preserve_aspect_ratio Optional; If false, the original video&#39;s aspect ratio will not be preserved, allowing customization of the aspect ratio using maxWidth and maxHeight, potentially skewing the video. Default is true. (optional)
     * @param  int $frame_rate Optional; Specify the frame rate of the output video. Defaults to original video frame rate. (optional)
     * @param  int $quality Optional; Specify the quality of the output video, where 100 is lossless and 1 is the lowest possible quality with highest compression. Default is 50. (optional)
     * @param  bool $extend_processing_time Optional; If true, will allow additional processing time for the video file conversion, using one API call per additional minute over the 5 minute default processing time, up to a maximum of 25 total minutes. This is generally necessary for files larger than 500 MB or longer than 30 minutes. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function videoConvertToWebmAsync($input_file, $file_url = null, $max_width = null, $max_height = null, $preserve_aspect_ratio = null, $frame_rate = null, $quality = null, $extend_processing_time = null)
    {
        return $this->videoConvertToWebmAsyncWithHttpInfo($input_file, $file_url, $max_width, $max_height, $preserve_aspect_ratio, $frame_rate, $quality, $extend_processing_time)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation videoConvertToWebmAsyncWithHttpInfo
     *
     * Convert Video to WEBM format.
     *
     * @param  \SplFileObject $input_file Input file to perform the operation on. (required)
     * @param  string $file_url Optional; URL of a video file being used for conversion. Use this option for files larger than 2GB. (optional)
     * @param  int $max_width Optional; Maximum width of the output video, up to the original video width. Defaults to original video width. (optional)
     * @param  int $max_height Optional; Maximum height of the output video, up to the original video width. Defaults to original video height. (optional)
     * @param  bool $preserve_aspect_ratio Optional; If false, the original video&#39;s aspect ratio will not be preserved, allowing customization of the aspect ratio using maxWidth and maxHeight, potentially skewing the video. Default is true. (optional)
     * @param  int $frame_rate Optional; Specify the frame rate of the output video. Defaults to original video frame rate. (optional)
     * @param  int $quality Optional; Specify the quality of the output video, where 100 is lossless and 1 is the lowest possible quality with highest compression. Default is 50. (optional)
     * @param  bool $extend_processing_time Optional; If true, will allow additional processing time for the video file conversion, using one API call per additional minute over the 5 minute default processing time, up to a maximum of 25 total minutes. This is generally necessary for files larger than 500 MB or longer than 30 minutes. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function videoConvertToWebmAsyncWithHttpInfo($input_file, $file_url = null, $max_width = null, $max_height = null, $preserve_aspect_ratio = null, $frame_rate = null, $quality = null, $extend_processing_time = null)
    {
        $returnType = 'string';
        $request = $this->videoConvertToWebmRequest($input_file, $file_url, $max_width, $max_height, $preserve_aspect_ratio, $frame_rate, $quality, $extend_processing_time);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'videoConvertToWebm'
     *
     * @param  \SplFileObject $input_file Input file to perform the operation on. (required)
     * @param  string $file_url Optional; URL of a video file being used for conversion. Use this option for files larger than 2GB. (optional)
     * @param  int $max_width Optional; Maximum width of the output video, up to the original video width. Defaults to original video width. (optional)
     * @param  int $max_height Optional; Maximum height of the output video, up to the original video width. Defaults to original video height. (optional)
     * @param  bool $preserve_aspect_ratio Optional; If false, the original video&#39;s aspect ratio will not be preserved, allowing customization of the aspect ratio using maxWidth and maxHeight, potentially skewing the video. Default is true. (optional)
     * @param  int $frame_rate Optional; Specify the frame rate of the output video. Defaults to original video frame rate. (optional)
     * @param  int $quality Optional; Specify the quality of the output video, where 100 is lossless and 1 is the lowest possible quality with highest compression. Default is 50. (optional)
     * @param  bool $extend_processing_time Optional; If true, will allow additional processing time for the video file conversion, using one API call per additional minute over the 5 minute default processing time, up to a maximum of 25 total minutes. This is generally necessary for files larger than 500 MB or longer than 30 minutes. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function videoConvertToWebmRequest($input_file, $file_url = null, $max_width = null, $max_height = null, $preserve_aspect_ratio = null, $frame_rate = null, $quality = null, $extend_processing_time = null)
    {
        // verify the required parameter 'input_file' is set
        if ($input_file === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $input_file when calling videoConvertToWebm'
            );
        }

        $resourcePath = '/video/convert/to/webm';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($file_url !== null) {
            $headerParams['fileUrl'] = ObjectSerializer::toHeaderValue($file_url);
        }
        // header params
        if ($max_width !== null) {
            $headerParams['maxWidth'] = ObjectSerializer::toHeaderValue($max_width);
        }
        // header params
        if ($max_height !== null) {
            $headerParams['maxHeight'] = ObjectSerializer::toHeaderValue($max_height);
        }
        // header params
        if ($preserve_aspect_ratio !== null) {
            $headerParams['preserveAspectRatio'] = ObjectSerializer::toHeaderValue($preserve_aspect_ratio);
        }
        // header params
        if ($frame_rate !== null) {
            $headerParams['frameRate'] = ObjectSerializer::toHeaderValue($frame_rate);
        }
        // header params
        if ($quality !== null) {
            $headerParams['quality'] = ObjectSerializer::toHeaderValue($quality);
        }
        // header params
        if ($extend_processing_time !== null) {
            $headerParams['extendProcessingTime'] = ObjectSerializer::toHeaderValue($extend_processing_time);
        }


        // form params
        if ($input_file !== null) {
            $multipart = true;
            $formParams['inputFile'] = \GuzzleHttp\Psr7\try_fopen(ObjectSerializer::toFormValue($input_file), 'rb');
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Apikey');
        if ($apiKey !== null) {
            $headers['Apikey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation videoGetInfo
     *
     * Get detailed information about a video or audio file
     *
     * @param  \SplFileObject $input_file Input file to perform the operation on. (required)
     * @param  string $file_url Optional; URL of a video file being used for conversion. Use this option for files larger than 2GB. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function videoGetInfo($input_file, $file_url = null)
    {
        list($response) = $this->videoGetInfoWithHttpInfo($input_file, $file_url);
        return $response;
    }

    /**
     * Operation videoGetInfoWithHttpInfo
     *
     * Get detailed information about a video or audio file
     *
     * @param  \SplFileObject $input_file Input file to perform the operation on. (required)
     * @param  string $file_url Optional; URL of a video file being used for conversion. Use this option for files larger than 2GB. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function videoGetInfoWithHttpInfo($input_file, $file_url = null)
    {
        $returnType = 'string';
        $request = $this->videoGetInfoRequest($input_file, $file_url);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation videoGetInfoAsync
     *
     * Get detailed information about a video or audio file
     *
     * @param  \SplFileObject $input_file Input file to perform the operation on. (required)
     * @param  string $file_url Optional; URL of a video file being used for conversion. Use this option for files larger than 2GB. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function videoGetInfoAsync($input_file, $file_url = null)
    {
        return $this->videoGetInfoAsyncWithHttpInfo($input_file, $file_url)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation videoGetInfoAsyncWithHttpInfo
     *
     * Get detailed information about a video or audio file
     *
     * @param  \SplFileObject $input_file Input file to perform the operation on. (required)
     * @param  string $file_url Optional; URL of a video file being used for conversion. Use this option for files larger than 2GB. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function videoGetInfoAsyncWithHttpInfo($input_file, $file_url = null)
    {
        $returnType = 'string';
        $request = $this->videoGetInfoRequest($input_file, $file_url);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'videoGetInfo'
     *
     * @param  \SplFileObject $input_file Input file to perform the operation on. (required)
     * @param  string $file_url Optional; URL of a video file being used for conversion. Use this option for files larger than 2GB. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function videoGetInfoRequest($input_file, $file_url = null)
    {
        // verify the required parameter 'input_file' is set
        if ($input_file === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $input_file when calling videoGetInfo'
            );
        }

        $resourcePath = '/video/convert/get-info';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($file_url !== null) {
            $headerParams['fileUrl'] = ObjectSerializer::toHeaderValue($file_url);
        }


        // form params
        if ($input_file !== null) {
            $multipart = true;
            $formParams['inputFile'] = \GuzzleHttp\Psr7\try_fopen(ObjectSerializer::toFormValue($input_file), 'rb');
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Apikey');
        if ($apiKey !== null) {
            $headers['Apikey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
